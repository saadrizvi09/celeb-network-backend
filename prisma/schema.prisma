// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Celebrity {
  // Explicit UUID generation and type for consistency and robustness
  id                          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                        String    @unique // Removed @db.VarChar for flexibility
  country                     String    // Removed @db.VarChar
  profileImageUrl             String?   // Removed @db.VarChar
  youtubeChannel              String?   // Removed @db.VarChar
  spotifyId                   String?   // Removed @db.VarChar
  imdbId                      String?   // Removed @db.VarChar
  fanbaseCount                Int       @default(0)
  sampleSetlistOrKeynoteTopics Json?    // Already correct
  createdAt                   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt                   DateTime  @default(now()) @db.Timestamp(6)
  description                 String?
  instagramHandle             String?   // Removed @db.VarChar
  category                    Json      @default("[]") // Already correct

  // Add relation for followers
  followedBy Follow[]

  @@map("celebrities") // Already correct
}

// User Model for Fan Authentication - Consistent explicit UUID
model User {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid // Consistent explicit UUID
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follows Follow[]
}

// Follow Model for Many-to-Many relationship - Consistent explicit UUIDs
model Follow {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid // Consistent explicit UUID
  userId       String    @db.Uuid // Explicitly define foreign key type as Uuid
  celebrityId  String    @db.Uuid // Explicitly define foreign key type as Uuid
  followedAt   DateTime  @default(now())

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  celebrity    Celebrity @relation(fields: [celebrityId], references: [id], onDelete: Cascade)

  @@unique([userId, celebrityId]) // Ensures a user can only follow a celebrity once
}
